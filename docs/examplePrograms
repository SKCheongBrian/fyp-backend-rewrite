## Demonstrate the static info gathering capabilities

class LOOKFORME {
  public static int y = 1;
  public static int x = 2;
  public static int get() {
    return x;
  }
}

public class Another {
  static int x = 3;
    public static void main(String[] args) {
        int x = 3;
        int y = LOOKFORME.get();
    }
}

## Index out of bound exception

public class Test {
    public static void main(String[] args) {
        int[] arr = new int[10];
        arr[10] = 3;
    }
}

## Show the stack trace for exception

public class Test {
    private static int baz() {
        return 3 / 0;
    }

    private static int bar() {
        return baz();
    }

    private static int foo() {
        return bar();
    }

    public static void main(String[] args) {
        int x = foo();
    }
}

## nodes
class Node {
    private int value;
    private Node next;

    public Node(int val) {
        this.value = val;
        this.next = null;
    }

    public void setNext(Node other) {
        this.next = other;
    }
}

public class Main {
    public static void main(String[] args) {
        Node one = new Node(1);
        Node two = new Node(2);
        Node three = new Node(3);
        one.setNext(two);
        two.setNext(three);
    }
}

## Variable Capture

interface C {
  void g();
}

class A {
  int x = 1;

  C f() {
    int y = 1;

    class B implements C {
      @Override
      public void g() {
        x = y; // accessing x and y is OK.
      }
    }

    B b = new B();
    return b;
  }
}

public class Main {
  public static void main(String[] args) {
    A a = new A();
    C b = a.f();
    b.g();
  }
}